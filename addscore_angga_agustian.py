# -*- coding: utf-8 -*-
"""AddScore_Angga Agustian

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EA6o2raSpHA6gVUquotYfi3ReNEbIr6O
"""



# NAME  : ANGGA AGUSTIAN
# CLASS : TI22T
# SID   : 20220040114

!pip install opencv-python-headless numpy matplotlib

from google.colab import files
uploaded = files.upload()

import cv2
import numpy as np
import matplotlib.pyplot as plt

def detect_edges(image_path):
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Image not found.")
        return

    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    edges = cv2.Canny(gray_image, 50, 150)

    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    result_image = image.copy()

    for contour in contours:
        cv2.drawContours(result_image, [contour], -1, (0, 255, 0), 2)

    print(f"Number of detected objects: {len(contours)}")

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('Original Image')
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title('Detected Edges and Contours')
    plt.imshow(cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB))
    plt.axis('off')

    plt.show()


image_path = list(uploaded.keys())[0]
detect_edges(image_path)



import cv2
import numpy as np
import matplotlib.pyplot as plt

def detect_edges(image_path):
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Image not found.")
        return

    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    edges = cv2.Canny(gray_image, 50, 150)

    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    result_image = image.copy()

    for contour in contours:
        cv2.drawContours(result_image, [contour], -1, (0, 255, 0), 2)

    print(f"Number of detected objects: {len(contours)}")

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('Original Image')
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title('Detected Edges and Contours')
    plt.imshow(cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB))
    plt.axis('off')

    plt.show()


image_path = list(uploaded.keys())[0]
detect_edges(image_path)

